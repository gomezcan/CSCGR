# This script calculate modules of nodes highly similar based on topology
library(scales)
library(ggrepel)
library(viridis)
library(plyr); library(dplyr)
library(tidyverse)
library(devtools)
library(tidygraph)
library(CoReg)
library(ggraph)
library(ggpubr)

## Read data
Regulome <- as_tibble(read.table("../NewData_targets_reduced.txt", h=F))
Regulome <- unique(Regulome[,c(1,3)])
colnames(Regulome) <- c("TF", "Target")
Regulome <- as_tibble(apply(Regulome, 2, as.character))

# Crate igrap object
AtNet <- networkFromEdgeList(Regulome)
AtNet_modules <-CoReg(AtNet)

# Extract Modules
DF_AtNet_modules <- as_tibble(AtNet_modules$module)

# Mark TFs
DF_AtNet_modules[,"TF_In_Reg"] <- (DF_AtNet_modules$ID %in% as.character(unique(Regulome$TF)))*1
# Reduce Modules to only TFs in module
DF_AtNet_modules_TFs <- subset(DF_AtNet_modules, TF_In_Reg==1)
write.table(DF_AtNet_modules, "At_CoReg_results.txt", row.names = F, sep="\t", quote = F)
write.table(DF_AtNet_modules_TFs, "At_CoReg_results_OnlyTFs.txt", row.names = F, sep="\t", quote = F)

# Summary of data
FreqModules <- as_tibble(as.data.frame(table(DF_AtNet_modules$module)))
FreqTFs_InModules <- as_tibble(as.data.frame(table(DF_AtNet_modules_TFs$module)))

FreqModules <- as_tibble(apply(FreqModules, 2, as.numeric))[-c(1),] # remove factors and  module '0'
FreqTFs_InModules <- as_tibble(apply(FreqTFs_InModules, 2, as.numeric))[-c(1),] # remove factors and  module '0'

colnames(FreqModules) <- c("module", "TotalGenes")
colnames(FreqTFs_InModules) <- c("module", "TotalTFs")

FreqModules <- left_join(FreqModules, FreqTFs_InModules, by="module")
FreqModules$TotalTFs[is.na(FreqModules$TotalTFs)] <- 0 # Replace NA by 0
write.table(FreqModules, "At_CountsGenesCoReg_results.txt", row.names = F, sep="\t", quote = F)

### Get Pairs of TFs
DF_AtNet_modules_TFs <- subset(DF_AtNet_modules_TFs, module!=0) # Remove genes not assigned to any module
DF_AtNet_modules_TFs <- left_join(DF_AtNet_modules_TFs, FreqTFs_InModules, by="module") # Add Total TFs in module


GetTFsPairsFromModules <- function(df){
  df <- subset(df, TotalTFs !=1)
  listModules <- as.character(unique(df$module))
  DFout <- matrix(ncol = 2)
  colnames(DFout) <- c("TF1", "TF2")
  for (m in listModules){
    Genelist <- as.character(subset(df, module==m)$ID)
    print(paste("...Module:",m,"lenght:",length(Genelist),"...", sep = " "))
    subdf <- data.frame(t(combn(Genelist,2)))
    colnames(subdf) <- c("TF1", "TF2")
    DFout <- rbind(DFout, subdf)
  }
  return(as_tibble(DFout[-c(1),]))
}

CoReg_Pairs <- GetTFsPairsFromModules(DF_AtNet_modules_TFs)
CoReg_Pairs <- unique(CoReg_Pairs) # remove duplicates
CoReg_Pairs["InModule"] <- 1
# Get Similarity score for TFs pairs
AtNet_modules_Similarity <- as_tibble(AtNet_modules$rank)
AtNet_modules_Similarity <- subset(AtNet_modules_Similarity, gene1 %in% as.character(unique(Regulome$TF)) & gene2 %in% as.character(unique(Regulome$TF)))
# mark TFs pairs in modules
AtNet_modules_Similarity <- left_join(AtNet_modules_Similarity, CoReg_Pairs, by=c("TF1","TF2"))
AtNet_modules_Similarity$InModule[is.na(AtNet_modules_Similarity$InModule)] <- 0

write.table(AtNet_modules_Similarity, "At_Predicted_network_CoReg_Song.txt", row.names = F, quote = F, sep = '\t')

